{
    "componentChunkName": "component---src-templates-content-js",
    "path": "/boids/",
    "result": {"data":{"markdownRemark":{"html":"<p>This is an implenetation of Craig Reynolds' <a href=\"https://en.wikipedia.org/wiki/Boids\">Boids</a> algorithm, which simulates the flocking of birds, as was presented in <a href=\"https://natureofcode.com/book/\">The Nature of Code</a> which is a book for Processing. Part of me feels bad for missing out on the Processing age, if only I was introduced to programming a little earlier!</p>\n<p>What the book helped the most with was its explanation of steering force. threejs doesn't have a native applyForce function as its not a physics library, but I figured something like Cannon would be a bit overkill here (on an already computationally intensive scene). Of course, representing birds in terms of objects with velocity/acceleration properties (as was done in Processing) would've been straightforward enough, but I had to learn about forwardRefs! (among other things)</p>\n<p><strong>flockSize</strong>: number of birds</p>\n<p><strong>separVal</strong>: separation - steering to avoid nearby crowding flockmates</p>\n<p><strong>alignVal</strong>: alignment - steering towards the average direction of nearby flockmates</p>\n<p><strong>cohesVal</strong>: cohesion - steering to move towards the average position of nearby flockmates</p>\n<p><strong>windVal</strong>: force in x-axis</p>\n<p><strong>bounds</strong>: size of the invisible square. once birds reach its end, they portal-jump to the other side</p>\n<p><strong>spawnRange</strong>: boundary of the region birds first spawn in. should always be smaller than bounds</p>","frontmatter":{"title":"boids","sceneCode":"BOIDS"}}},"pageContext":{"slug":"/boids/"}},
    "staticQueryHashes": []}